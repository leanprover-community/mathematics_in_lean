import MIL.Common
import Mathlib.Topology.Instances.Real
import Mathlib.Analysis.NormedSpace.BanachSteinhaus

open Set Filter
open Topology Filter

variable {X : Type*} [MetricSpace X] (a b c : X)

#check (dist a b : ‚Ñù)
#check (dist_nonneg : 0 ‚â§ dist a b)
#check (dist_eq_zero : dist a b = 0 ‚Üî a = b)
#check (dist_comm a b : dist a b = dist b a)
#check (dist_triangle a b c : dist a c ‚â§ dist a b + dist b c)

-- Note the next three lines are not quoted, their purpose is to make sure those things don't get renamed while we're looking elsewhere.
#check EMetricSpace
#check PseudoMetricSpace
#check PseudoEMetricSpace

example {u : ‚Ñï ‚Üí X} {a : X} :
    Tendsto u atTop (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, dist (u n) a < Œµ :=
  Metric.tendsto_atTop

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} :
    Continuous f ‚Üî
      ‚àÄ x : X, ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ x', dist x' x < Œ¥ ‚Üí dist (f x') (f x) < Œµ :=
  Metric.continuous_iff

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by continuity

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  continuous_dist.comp ((hf.comp continuous_fst).prod_mk (hf.comp continuous_snd))

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by
  apply Continuous.dist
  exact hf.comp continuous_fst
  exact hf.comp continuous_snd

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  (hf.comp continuous_fst).dist (hf.comp continuous_snd)

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  hf.fst'.dist hf.snd'

example {f : ‚Ñù ‚Üí X} (hf : Continuous f) : Continuous fun x : ‚Ñù ‚Ü¶ f (x ^ 2 + x) :=
  sorry

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] (f : X ‚Üí Y) (a : X) :
    ContinuousAt f a ‚Üî ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ {x}, dist x a < Œ¥ ‚Üí dist (f x) (f a) < Œµ :=
  Metric.continuousAt_iff

variable (r : ‚Ñù)

example : Metric.ball a r = { b | dist b a < r } :=
  rfl

example : Metric.closedBall a r = { b | dist b a ‚â§ r } :=
  rfl

example (hr : 0 < r) : a ‚àà Metric.ball a r :=
  Metric.mem_ball_self hr

example (hr : 0 ‚â§ r) : a ‚àà Metric.closedBall a r :=
  Metric.mem_closedBall_self hr

example (s : Set X) : IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÉ Œµ > 0, Metric.ball x Œµ ‚äÜ s :=
  Metric.isOpen_iff

example {s : Set X} : IsClosed s ‚Üî IsOpen (s·∂ú) :=
  isOpen_compl_iff.symm

example {s : Set X} (hs : IsClosed s) {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a))
    (hus : ‚àÄ n, u n ‚àà s) : a ‚àà s :=
  hs.mem_of_tendsto hu (eventually_of_forall hus)

example {s : Set X} : a ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ b ‚àà s, a ‚àà Metric.ball b Œµ :=
  Metric.mem_closure_iff

example {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a)) {s : Set X} (hs : ‚àÄ n, u n ‚àà s) :
    a ‚àà closure s :=
  sorry

example {x : X} {s : Set X} : s ‚àà ùìù x ‚Üî ‚àÉ Œµ > 0, Metric.ball x Œµ ‚äÜ s :=
  Metric.nhds_basis_ball.mem_iff

example {x : X} {s : Set X} : s ‚àà ùìù x ‚Üî ‚àÉ Œµ > 0, Metric.closedBall x Œµ ‚äÜ s :=
  Metric.nhds_basis_closedBall.mem_iff

example : IsCompact (Set.Icc 0 1 : Set ‚Ñù) :=
  isCompact_Icc

example {s : Set X} (hs : IsCompact s) {u : ‚Ñï ‚Üí X} (hu : ‚àÄ n, u n ‚àà s) :
    ‚àÉ a ‚àà s, ‚àÉ œÜ : ‚Ñï ‚Üí ‚Ñï, StrictMono œÜ ‚àß Tendsto (u ‚àò œÜ) atTop (ùìù a) :=
  hs.tendsto_subseq hu

example {s : Set X} (hs : IsCompact s) (hs' : s.Nonempty) {f : X ‚Üí ‚Ñù}
      (hfs : ContinuousOn f s) :
    ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f x ‚â§ f y :=
  hs.exists_forall_le hs' hfs

example {s : Set X} (hs : IsCompact s) (hs' : s.Nonempty) {f : X ‚Üí ‚Ñù}
      (hfs : ContinuousOn f s) :
    ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f y ‚â§ f x :=
  hs.exists_forall_ge hs' hfs

example {s : Set X} (hs : IsCompact s) : IsClosed s :=
  hs.isClosed

example {X : Type*} [MetricSpace X] [CompactSpace X] : IsCompact (univ : Set X) :=
  isCompact_univ

#check IsCompact.isClosed

example {X : Type*} [MetricSpace X] {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y} :
    UniformContinuous f ‚Üî
      ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ {a b : X}, dist a b < Œ¥ ‚Üí dist (f a) (f b) < Œµ :=
  Metric.uniformContinuous_iff

example {X : Type*} [MetricSpace X] [CompactSpace X]
      {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y}
    (hf : Continuous f) : UniformContinuous f :=
  sorry

example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ m ‚â• N, ‚àÄ n ‚â• N, dist (u m) (u n) < Œµ :=
  Metric.cauchySeq_iff

example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ n ‚â• N, dist (u n) (u N) < Œµ :=
  Metric.cauchySeq_iff'

example [CompleteSpace X] (u : ‚Ñï ‚Üí X) (hu : CauchySeq u) :
    ‚àÉ x, Tendsto u atTop (ùìù x) :=
  cauchySeq_tendsto_of_complete hu

open BigOperators

open Finset

theorem cauchySeq_of_le_geometric_two' {u : ‚Ñï ‚Üí X}
    (hu : ‚àÄ n : ‚Ñï, dist (u n) (u (n + 1)) ‚â§ (1 / 2) ^ n) : CauchySeq u := by
  rw [Metric.cauchySeq_iff']
  intro Œµ Œµ_pos
  obtain ‚ü®N, hN‚ü© : ‚àÉ N : ‚Ñï, 1 / 2 ^ N * 2 < Œµ := by sorry
  use N
  intro n hn
  obtain ‚ü®k, rfl : n = N + k‚ü© := le_iff_exists_add.mp hn
  calc
    dist (u (N + k)) (u N) = dist (u (N + 0)) (u (N + k)) := sorry
    _ ‚â§ ‚àë i in range k, dist (u (N + i)) (u (N + (i + 1))) := sorry
    _ ‚â§ ‚àë i in range k, (1 / 2 : ‚Ñù) ^ (N + i) := sorry
    _ = 1 / 2 ^ N * ‚àë i in range k, (1 / 2 : ‚Ñù) ^ i := sorry
    _ ‚â§ 1 / 2 ^ N * 2 := sorry
    _ < Œµ := sorry


open Metric

example [CompleteSpace X] (f : ‚Ñï ‚Üí Set X) (ho : ‚àÄ n, IsOpen (f n)) (hd : ‚àÄ n, Dense (f n)) :
    Dense (‚ãÇ n, f n) := by
  let B : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (1 / 2) ^ n
  have Bpos : ‚àÄ n, 0 < B n
  sorry
  /- Translate the density assumption into two functions `center` and `radius` associating
    to any n, x, Œ¥, Œ¥pos a center and a positive radius such that
    `closedBall center radius` is included both in `f n` and in `closedBall x Œ¥`.
    We can also require `radius ‚â§ (1/2)^(n+1)`, to ensure we get a Cauchy sequence later. -/
  have :
    ‚àÄ (n : ‚Ñï) (x : X),
      ‚àÄ Œ¥ > 0, ‚àÉ y : X, ‚àÉ r > 0, r ‚â§ B (n + 1) ‚àß closedBall y r ‚äÜ closedBall x Œ¥ ‚à© f n :=
    by sorry
  choose! center radius Hpos HB Hball using this
  intro x
  rw [mem_closure_iff_nhds_basis nhds_basis_closedBall]
  intro Œµ Œµpos
  /- `Œµ` is positive. We have to find a point in the ball of radius `Œµ` around `x`
    belonging to all `f n`. For this, we construct inductively a sequence
    `F n = (c n, r n)` such that the closed ball `closedBall (c n) (r n)` is included
    in the previous ball and in `f n`, and such that `r n` is small enough to ensure
    that `c n` is a Cauchy sequence. Then `c n` converges to a limit which belongs
    to all the `f n`. -/
  let F : ‚Ñï ‚Üí X √ó ‚Ñù := fun n ‚Ü¶
    Nat.recOn n (Prod.mk x (min Œµ (B 0)))
      fun n p ‚Ü¶ Prod.mk (center n p.1 p.2) (radius n p.1 p.2)
  let c : ‚Ñï ‚Üí X := fun n ‚Ü¶ (F n).1
  let r : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (F n).2
  have rpos : ‚àÄ n, 0 < r n := by sorry
  have rB : ‚àÄ n, r n ‚â§ B n := by sorry
  have incl : ‚àÄ n, closedBall (c (n + 1)) (r (n + 1)) ‚äÜ closedBall (c n) (r n) ‚à© f n := by
    sorry
  have cdist : ‚àÄ n, dist (c n) (c (n + 1)) ‚â§ B n := by sorry
  have : CauchySeq c := cauchySeq_of_le_geometric_two' cdist
  -- as the sequence `c n` is Cauchy in a complete space, it converges to a limit `y`.
  rcases cauchySeq_tendsto_of_complete this with ‚ü®y, ylim‚ü©
  -- this point `y` will be the desired point. We will check that it belongs to all
  -- `f n` and to `ball x Œµ`.
  use y
  have I : ‚àÄ n, ‚àÄ m ‚â• n, closedBall (c m) (r m) ‚äÜ closedBall (c n) (r n) := by sorry
  have yball : ‚àÄ n, y ‚àà closedBall (c n) (r n) := by sorry
  sorry

